{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red220\green161\blue13;}
{\*\expandedcolortbl;;\cssrgb\c89412\c68627\c3922;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs40 \cf0 React\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs26 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Modules js : s\'e9par\'e9s son code en plusieurs fichiers/fonctionnalit\'e9s\
Un bundled va rassembler tous les fichiers n\'e9cessaires \'e0 notre app (images, font, modules JS, outils, JSX\'85) en un dossier optimis\'e9, le bundle\
Bundle : \
Vite\
Create-react-app / Webpack\
\
Installation React:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 npm create vite@latest\
Npm i\
Npm run dev\
Lancer le bundle : npm run build\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Rajouter dans les settings.json :\uc0\u8232     "reactSnippets.settings.importReactOnTop": false,\
    "emmet.includeLanguages": \{\
        "javascript": "javascriptreact"\
    \},\
    "emmet.syntaxProfiles": \{\
        "javascript" : "jsx"\
    \},\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Tailwind: npm i postcss-cli -g\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Il faut retourner toujours un seul \'e9l\'e9ment avec les composants\
\
useState\
useRef\
useEffect\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Test API : {\field{\*\fldinst{HYPERLINK "https://jsonplaceholder.typicode.com/"}}{\fldrslt \cf2 https://jsonplaceholder.typicode.com/}}\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 setInterval :\
    useEffect(() => \{\
      const intervalID = setInterval(() => \{\
        setCount(state => state + 1)\
      \}, 1000)\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 S\'e9lectionner plusieurs \'e9l\'e9ments avec Ref:\uc0\u8232 export default function Container() \{\
\
  const inputsRef = useRef([])\
\
  function addInputRef(el) \{\
    if(el && !inputsRef.current.includes(el)) \{\
      inputsRef.current.push(el)\
    \}\
    console.log(el)\
  \}\
\
  return (\
   <div>\
      <input ref=\{addInputRef\} type="text" />\
      <input ref=\{addInputRef\} type="text" />\
      <input ref=\{addInputRef\} type="text" />\
   </div>\
  )\
\}\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Reducer :\uc0\u8232 export default function Container() \{\
  const [count, dispatch] = useReducer(reducer, 0)\
\
  function reducer(state,action) \{\
    switch(action.type) \{\
      case "increment":\
        return state + 1\
    \}\
  \}\
\
  return <div>\
    <h1>Valeur du compteur : \{count\}</h1>\
  <button onClick=\{() => dispatch(\{type:"increment"\})\}>Incr</button>\
  </div>\
\}\
\
Cr\'e9er un syst\'e8m\'e8me de route :\
npm i react-router-dom\
Doit \'eatre mis en place dans le fichier global App.jsx\
import \{ BrowserRouter, Routes, Route \} from "react-router-dom"\
\
Redux \
}